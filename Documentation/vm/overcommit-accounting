Linux内核支持以下overcommit处理模式

0	-	启发式过度使用处理。拒绝明显的地址空间过量使用。用于典型系统。
        它确保严重的疯狂分配失败，同时允许过度使用以减少交换使用。
        在此模式下，允许 root 分配更多的内存。这是默认设置。

1	-	总是过度承诺。适用于某些科学应用。

2	-	不要过度承诺。系统的总地址空间提交不允许超过"交换 + 物理 RAM" 的可配置百分比（默认为 50）。
        根据您使用的百分比，在大多数情况下，这意味着进程在访问页面时不会被终止，
        但会在适当的时候收到内存分配错误。

过量使用策略是通过 sysctl `vm.overcommit_memory' 设置的。

过量使用百分比通过“vm.overcommit_ratio”设置。

当前的过量使用限制和提交量在 /proc/meminfo 中可分别作为 CommitLimit 和 Committed_AS 查看。

Gotchas
-------

The C language stack growth does an implicit mremap. If you want absolute
guarantees and run close to the edge you MUST mmap your stack for the 
largest size you think you will need. For typical stack usage this does
not matter much but it's a corner case if you really really care

In mode 2 the MAP_NORESERVE flag is ignored. 


How It Works
------------

The overcommit is based on the following rules

For a file backed map
	SHARED or READ-only	-	0 cost (the file is the map not swap)
	PRIVATE WRITABLE	-	size of mapping per instance

For an anonymous or /dev/zero map
	SHARED			-	size of mapping
	PRIVATE READ-only	-	0 cost (but of little use)
	PRIVATE WRITABLE	-	size of mapping per instance

Additional accounting
	Pages made writable copies by mmap
	shmfs memory drawn from the same pool

Status
------

o	We account mmap memory mappings
o	We account mprotect changes in commit
o	We account mremap changes in size
o	We account brk
o	We account munmap
o	We report the commit status in /proc
o	Account and check on fork
o	Review stack handling/building on exec
o	SHMfs accounting
o	Implement actual limit enforcement

To Do
-----
o	Account ptrace pages (this is hard)
