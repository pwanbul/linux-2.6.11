		     THE LINUX/I386 BOOT PROTOCOL
		     ----------------------------

		    H. Peter Anvin <hpa@zytor.com>
			Last update 2002-01-01

在i386平台上，Linux内核使用了相当复杂的启动约定。这种变化的部分原因是历史悠久的历史，
以及在早期，人们希望将内核本身作为可引导映像，复杂的PC内存模型以及由于实际的有效淘汰
而导致PC行业的期望发生了变化。模式DOS作为主流操作系统。

当前，存在四个版本的Linuxi386引导协议。

旧内核：仅zImage/Image支持。一些非常早期的内核甚至可能不支持命令行。

Protocol 2.00:	（内核1.3.73）添加了bzImage和initrd支持，以及一种在
引导加载程序和内核之间进行通信的形式化方法。尽管传统的设置区域仍可写，但可以重新设置。

Protocol 2.01:	（内核1.3.76）添加了堆溢出警告。

Protocol 2.02:	（内核2.4.0-test3-pre3）新的命令行协议。降低常规内存上限。
不会覆盖传统的设置区域，因此对于使用来自SMM或32位BIOS入口点的EBDA的系统而言，引导安全。
zImage已弃用，但仍受支持。

Protocol 2.03:	（内核2.4.18-pre1）明确地使引导加载程序使用尽可能高的initrd地址。


**** 内存布局

用于Image或zImage内核的内核加载器的传统内存映射通常如下所示：

	|			 |
0A0000	+------------------------+
	|  Reserved for BIOS	 |	Do not use.  Reserved for BIOS EBDA.
09A000	+------------------------+
	|  Stack/heap/cmdline	 |	For use by the kernel real-mode code.
098000	+------------------------+	
	|  Kernel setup		 |	The kernel real-mode code.
090200	+------------------------+
	|  Kernel boot sector	 |	The kernel legacy boot sector.
090000	+------------------------+
	|  Protected-mode kernel |	内核映像的大部分。
010000	+------------------------+
	|  Boot loader		 |	<- Boot sector entry point 0000:7C00
001000	+------------------------+
	|  Reserved for MBR/BIOS |
000800	+------------------------+
	|  Typically used by MBR |
000600	+------------------------+ 
	|  BIOS use only	         |      BIOS中断向量表(1K) 与 硬件信息(256B)
000000	+------------------------+


当使用bzImage时，保护模式内核被重定位到0x100000（“高内存”），并且内核实模式块（boot sector,setup, and stack/heap）
可重定位到0x10000到低内存末尾之间的任何地址。不幸的是，在协议2.00和2.01中，仍要求命令行位于0x9XXXX内存范围内，
并且该内存范围仍被早期内核覆盖。 2.02协议解决了该问题。

最好保持“内存上限”（即引导加载程序触及的低内存最高点）尽可能低，因为某些较新的BIOS已开始分配一些相当大的内存，称为扩展BIOS数据。
低内存顶部附近的区域。引导加载程序应使用“ INT 12h” BIOS调用来验证有多少可用的低内存。

不幸的是，如果INT 12h报告内存量太低，则引导加载程序通常无法执行任何操作，只能向用户报告错误。
因此，引导加载程序应设计为在低内存中占用尽可能少的空间。对于需要将数据写入0x90000段的zImage或旧的bzImage内核，
引导加载程序应确保不要使用大于0x9A000点的内存；太多的BIOS将超过该点。


**** THE REAL-MODE KERNEL HEADER

在下文中，以及在内核引导序列中的任何位置，“扇区”均指512个字节。它与基础介质的实际扇区大小无关。

加载Linux内核的第一步应该是加载实模式代码（boot sector and setup code），然后检查偏移量0x01f1处的以下标头。
尽管引导加载程序可以选择仅加载前两个扇区（1K），然后检查引导扇区的大小，但是实模式代码的总和最多为32K。

The header looks like:

Offset	Proto	Name		Meaning
/Size

01F1/1	ALL	setup_sects	The size of the setup in sectors
01F2/2	ALL	root_flags	If set, the root is mounted readonly
01F4/2	ALL	syssize		DO NOT USE - for bootsect.S use only
01F6/2	ALL	swap_dev	DO NOT USE - obsolete
01F8/2	ALL	ram_size	DO NOT USE - for bootsect.S use only
01FA/2	ALL	vid_mode	Video mode control
01FC/2	ALL	root_dev	Default root device number
01FE/2	ALL	boot_flag	0xAA55 magic number
0200/2	2.00+	jump		Jump instruction
0202/4	2.00+	header		Magic signature "HdrS"
0206/2	2.00+	version		Boot protocol version supported
0208/4	2.00+	realmode_swtch	Boot loader hook (see below)
020C/2	2.00+	start_sys	The load-low segment (0x1000) (obsolete)
020E/2	2.00+	kernel_version	Pointer to kernel version string
0210/1	2.00+	type_of_loader	Boot loader identifier
0211/1	2.00+	loadflags	Boot protocol option flags
0212/2	2.00+	setup_move_size	Move to high memory size (used with hooks)
0214/4	2.00+	code32_start	Boot loader hook (see below)
0218/4	2.00+	ramdisk_image	initrd load address (set by boot loader)
021C/4	2.00+	ramdisk_size	initrd size (set by boot loader)
0220/4	2.00+	bootsect_kludge	DO NOT USE - for bootsect.S use only
0224/2	2.01+	heap_end_ptr	Free memory after setup end
0226/2	N/A	pad1		Unused
0228/4	2.02+	cmd_line_ptr	32-bit pointer to the kernel command line
022C/4	2.03+	initrd_addr_max	Highest legal initrd address

为了向后兼容，如果setup_sects字段包含0，则实际值为4。

如果在偏移量0x202处找不到“ HdrS”（0x53726448）幻数，则引导协议版本为“旧”。加载旧内核时，应假定以下参数：

	Image type = zImage
	initrd not supported
	Real-mode kernel must be located at 0x90000.

否则，“版本”字段包含协议版本，例如协议版本2.01在此字段中将包含0x0201。在标题中设置字段时，必须确保仅设置使用的协议版本支持的字段。

如果将“ kernel_version”字段设置为非零值，则该字段包含指向以null终止的人类可读内核版本号字符串的指针，该字符串应小于0x200。
这可以用来向用户显示内核版本。此值应小于（0x200*setup_sects）。例如，如果此值设置为0x1c00，则可以在内核文件中的偏移量0x1e00处找
到内核版本号字符串。仅当“ setup_sects”字段包含值14或更高时，才是有效值。

大多数引导加载程序会直接将内核直接加载到其目标地址。这样的引导加载程序无需担心填写标题中的大多数字段。但是，应填写以下字段：

  vid_mode:
	Please see the section on SPECIAL COMMAND LINE OPTIONS.

  type_of_loader:
	如果引导加载程序具有分配的ID（请参见下表），请在此处输入0xTV，其中T是引导加载程序的标识符，而V是版本号。否则，请在此处输入0xFF。

	Assigned boot loader ids:
	0  LILO
	1  Loadlin
	2  bootsect-loader
	3  SYSLINUX
	4  EtherBoot
	5  ELILO
	7  GRuB
	8  U-BOOT

	Please contact <hpa@zytor.com> if you need a bootloader ID
	value assigned.

  loadflags, heap_end_ptr:
	如果协议版本为2.01或更高版本，则将设置堆的偏移量限制输入heap_end_ptr中，并设置loadflags的0x80位（CAN_USE_HEAP）。
	heap_end_ptr似乎是相对于安装开始的（偏移量0x0200）。

  setup_move_size: 
	When using protocol 2.00 or 2.01, if the real mode
	kernel is not loaded at 0x90000, it gets moved there later in
	the loading sequence.  Fill in this field if you want
	additional data (such as the kernel command line) moved in
	addition to the real-mode kernel itself.

  ramdisk_image, ramdisk_size:
	If your boot loader has loaded an initial ramdisk (initrd),
	set ramdisk_image to the 32-bit pointer to the ramdisk data
	and the ramdisk_size to the size of the ramdisk data.

	The initrd should typically be located as high in memory as
	possible, as it may otherwise get overwritten by the early
	kernel initialization sequence.	 However, it must never be
	located above the address specified in the initrd_addr_max
	field.	The initrd should be at least 4K page aligned.

  cmd_line_ptr:
	If the protocol version is 2.02 or higher, this is a 32-bit
	pointer to the kernel command line.  The kernel command line
	can be located anywhere between the end of setup and 0xA0000.
	Fill in this field even if your boot loader does not support a
	command line, in which case you can point this to an empty
	string (or better yet, to the string "auto".)  If this field
	is left at zero, the kernel will assume that your boot loader
	does not support the 2.02+ protocol.

  ramdisk_max:
	The maximum address that may be occupied by the initrd
	contents.  For boot protocols 2.02 or earlier, this field is
	not present, and the maximum address is 0x37FFFFFF.  (This
	address is defined as the address of the highest safe byte, so
	if your ramdisk is exactly 131072 bytes long and this field is
	0x37FFFFFF, you can start your ramdisk at 0x37FE0000.)


**** THE KERNEL COMMAND LINE

内核命令行已成为引导加载程序与内核通信的重要方式。它的某些选项也与引导加载程序本身有关，请参见下面的“特殊命令行选项”。

内核命令行是一个以NULL终止的字符串，最长255个字符，外加最后一个null。

如果引导协议版本为2.02或更高版本，则内核命令行的地址由标头字段cmd_line_ptr给出（请参见上文）。

If the protocol version is *not* 2.02 or higher, the kernel
command line is entered using the following protocol:

	At offset 0x0020 (word), "cmd_line_magic", enter the magic
	number 0xA33F.

	At offset 0x0022 (word), "cmd_line_offset", enter the offset
	of the kernel command line (relative to the start of the
	real-mode kernel).
	
	The kernel command line *must* be within the memory region
	covered by setup_move_size, so you may need to adjust this
	field.


**** SAMPLE BOOT CONFIGURATION

As a sample configuration, assume the following layout of the real
mode segment:

	0x0000-0x7FFF	Real mode kernel
	0x8000-0x8FFF	Stack and heap
	0x9000-0x90FF	Kernel command line

Such a boot loader should enter the following fields in the header:

	unsigned long base_ptr;	/* base address for real-mode segment */

	if ( setup_sects == 0 ) {
		setup_sects = 4;
	}

	if ( protocol >= 0x0200 ) {
		type_of_loader = <type code>;
		if ( loading_initrd ) {
			ramdisk_image = <initrd_address>;
			ramdisk_size = <initrd_size>;
		}
		if ( protocol >= 0x0201 ) {
			heap_end_ptr = 0x9000 - 0x200;
			loadflags |= 0x80; /* CAN_USE_HEAP */
		}
		if ( protocol >= 0x0202 ) {
			cmd_line_ptr = base_ptr + 0x9000;
		} else {
			cmd_line_magic	= 0xA33F;
			cmd_line_offset = 0x9000;
			setup_move_size = 0x9100;
		}
	} else {
		/* Very old kernel */

		cmd_line_magic	= 0xA33F;
		cmd_line_offset = 0x9000;

		/* A very old kernel MUST have its real-mode code
		   loaded at 0x90000 */

		if ( base_ptr != 0x90000 ) {
			/* Copy the real-mode kernel */
			memcpy(0x90000, base_ptr, (setup_sects+1)*512);
			/* Copy the command line */
			memcpy(0x99000, base_ptr+0x9000, 256);

			base_ptr = 0x90000;		 /* Relocated */
		}

		/* It is recommended to clear memory up to the 32K mark */
		memset(0x90000 + (setup_sects+1)*512, 0,
		       (64-(setup_sects+1))*512);
	}


**** LOADING THE REST OF THE KERNEL

The non-real-mode kernel starts at offset (setup_sects+1)*512 in the
kernel file (again, if setup_sects == 0 the real value is 4.)  It
should be loaded at address 0x10000 for Image/zImage kernels and
0x100000 for bzImage kernels.

The kernel is a bzImage kernel if the protocol >= 2.00 and the 0x01
bit (LOAD_HIGH) in the loadflags field is set:

	is_bzImage = (protocol >= 0x0200) && (loadflags & 0x01);
	load_address = is_bzImage ? 0x100000 : 0x10000;

Note that Image/zImage kernels can be up to 512K in size, and thus use
the entire 0x10000-0x90000 range of memory.  This means it is pretty
much a requirement for these kernels to load the real-mode part at
0x90000.  bzImage kernels allow much more flexibility.


**** SPECIAL COMMAND LINE OPTIONS

If the command line provided by the boot loader is entered by the
user, the user may expect the following command line options to work.
They should normally not be deleted from the kernel command line even
though not all of them are actually meaningful to the kernel.  Boot
loader authors who need additional command line options for the boot
loader itself should get them registered in
Documentation/kernel-parameters.txt to make sure they will not
conflict with actual kernel options now or in the future.

  vga=<mode>
	<mode> here is either an integer (in C notation, either
	decimal, octal, or hexadecimal) or one of the strings
	"normal" (meaning 0xFFFF), "ext" (meaning 0xFFFE) or "ask"
	(meaning 0xFFFD).  This value should be entered into the
	vid_mode field, as it is used by the kernel before the command
	line is parsed.

  mem=<size>
	<size> is an integer in C notation optionally followed by K, M
	or G (meaning << 10, << 20 or << 30).  This specifies the end
	of memory to the kernel. This affects the possible placement
	of an initrd, since an initrd should be placed near end of
	memory.  Note that this is an option to *both* the kernel and
	the bootloader!

  initrd=<file>
	An initrd should be loaded.  The meaning of <file> is
	obviously bootloader-dependent, and some boot loaders
	(e.g. LILO) do not have such a command.

In addition, some boot loaders add the following options to the
user-specified command line:

  BOOT_IMAGE=<file>
	The boot image which was loaded.  Again, the meaning of <file>
	is obviously bootloader-dependent.

  auto
	The kernel was booted without explicit user intervention.

If these options are added by the boot loader, it is highly
recommended that they are located *first*, before the user-specified
or configuration-specified command line.  Otherwise, "init=/bin/sh"
gets confused by the "auto" option.


**** RUNNING THE KERNEL

The kernel is started by jumping to the kernel entry point, which is
located at *segment* offset 0x20 from the start of the real mode
kernel.  This means that if you loaded your real-mode kernel code at
0x90000, the kernel entry point is 9020:0000.

At entry, ds = es = ss should point to the start of the real-mode
kernel code (0x9000 if the code is loaded at 0x90000), sp should be
set up properly, normally pointing to the top of the heap, and
interrupts should be disabled.  Furthermore, to guard against bugs in
the kernel, it is recommended that the boot loader sets fs = gs = ds =
es = ss.

In our example from above, we would do:

	/* Note: in the case of the "old" kernel protocol, base_ptr must
	   be == 0x90000 at this point; see the previous sample code */

	seg = base_ptr >> 4;

	cli();	/* Enter with interrupts disabled! */

	/* Set up the real-mode kernel stack */
	_SS = seg;
	_SP = 0x9000;	/* Load SP immediately after loading SS! */

	_DS = _ES = _FS = _GS = seg;
	jmp_far(seg+0x20, 0);	/* Run the kernel */

If your boot sector accesses a floppy drive, it is recommended to
switch off the floppy motor before running the kernel, since the
kernel boot leaves interrupts off and thus the motor will not be
switched off, especially if the loaded kernel has the floppy driver as
a demand-loaded module!


**** ADVANCED BOOT TIME HOOKS

If the boot loader runs in a particularly hostile environment (such as
LOADLIN, which runs under DOS) it may be impossible to follow the
standard memory location requirements.  Such a boot loader may use the
following hooks that, if set, are invoked by the kernel at the
appropriate time.  The use of these hooks should probably be
considered an absolutely last resort!

IMPORTANT: All the hooks are required to preserve %esp, %ebp, %esi and
%edi across invocation.

  realmode_swtch:
	A 16-bit real mode far subroutine invoked immediately before
	entering protected mode.  The default routine disables NMI, so
	your routine should probably do so, too.

  code32_start:
	A 32-bit flat-mode routine *jumped* to immediately after the
	transition to protected mode, but before the kernel is
	uncompressed.  No segments, except CS, are set up; you should
	set them up to KERNEL_DS (0x18) yourself.

	After completing your hook, you should jump to the address
	that was in this field before your boot loader overwrote it.
